#!/bin/sh

if [ -z "$ydb_dist" ]; then
    ydb_dist=$(pkg-config --variable=prefix yottadb)
fi

cat <<EOF > error_codes.go
// Code generated by go generate; DO NOT EDIT.
package yottadb

const (
YDB_INT_MAX = 0x7fffffff
EOF
grep "#define YDB_ERR_" $ydb_dist/libydberrors*.h | awk '{print $2,"=",$3}' >> error_codes.go
grep -E "#define\s+YDB_TP" $ydb_dist/libyottadb.h | awk '{s = ""; for (i = 3; i <= NF; i++) s = s $i " "; print $2,"=",s}' >> error_codes.go
grep -E "#define\s+YDB_[^\s]*OK" $ydb_dist/libyottadb.h | awk '{s = ""; for (i = 3; i <= NF; i++) s = s $i " "; print $2,"=",s}' >> error_codes.go
grep -E "#define\s+YDB_LOCK" $ydb_dist/libyottadb.h | awk '{s = ""; for (i = 3; i <= NF; i++) s = s $i " "; print $2,"=",s}' >> error_codes.go
# We exclude YDB_MAX_TIME_NSEC because it is coded as a constant using data types Go doesn't understand
grep -E "#define\s+YDB_MAX" $ydb_dist/libyottadb.h | awk '{s = ""; for (i = 3; i <= NF; i++) s = s $i " "; print $2,"=",s}' \
    | grep -v "YDB_MAX_TIME_NSEC" | grep -v "YDB_MAX_YDBERR" | grep -v "YDB_MAX_ERROR" >> error_codes.go
echo "" >> error_codes.go
gcc -E $ydb_dist/libyottadb.h | grep YDB | tr ',' ' ' >> error_codes.go
cat <<EOF >> error_codes.go
)

EOF
